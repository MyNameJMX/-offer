#include <exception>
#include <cstdlib>

int MinInorder(int* numbers, int index1, int index2)  
{
	int result = numbers[index1];
	for (int i = index1; i <= index2; ++i) 
	{
		if (result > numbers[i])
			result = numbers[i];
	}
	return result;
}

int Min(int* numbers, int length) 
{
	if (numbers == nullptr || length == 0)
		throw new std::exception("Invalid Input");
	int index1 = 0;
	int index2 = length - 1;
	int indexMid = index1;
	//如果是已序数组的话，那么直接有number[index1]<number[length-1] 
	//所以此时要直接输出number[index1] index1 = indexMid
	while (numbers[index1] >= numbers[index2]) 
	{
		if (index2 - index1 == 1) 
		{
			indexMid = index2;
			break;
		}
		indexMid = (index1 + index2) / 2;
		if ((numbers[index1] == numbers[index2]) && (numbers[indexMid] == numbers[index1]))//只能顺序查找min
			return MinInorder(numbers, index1, index2);//不严格递增的情况
		else if (numbers[index1] > numbers[index2])
			index1 = indexMid;
		else
			index2 = indexMid;
	}
	return numbers[indexMid];
}
int main()
{

}
